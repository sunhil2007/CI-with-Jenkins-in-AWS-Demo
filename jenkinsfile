pipeline {
    agent any
    environment{
        rtMaven = Artifactory.newMavenBuild()
        rtServer = Artifactory.server 'ART'
    }
    stages {

        stage('Build') { 
            steps {
                echo "Building code using pipeline.."
                sh "mvn clean package"
                junit(allowEmptyResults: true, testResults: '**/target/surefire-reports/TEST-*.xml')
            }
        }
        stage('Test') { 
            steps {
                echo "Testing code using pipeline.."
            }
        }
        stage('Sonarqube') {
            steps {
                withSonarQubeEnv('Superleague-Sprint-3') {
                sh "/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/null/bin/sonar-scanner"
            }
            }
        }
        stage('Artifactory') {
            steps {
                echo "Artifactory Step"
                


                
                script{
                def iServer = Artifactory.server 'ART'
                def iMaven = Artifactory.newMavenBuild()
                def buildInfo = Artifactory.newBuildInfo()
                iMaven.deployer server: iServer,releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
                iMaven.deployer.deployArtifacts = true
                rtMavenDeployer (
                    id: '12',
                    server: 'ART',
                    releaseRepo: 'libs-release-local',
                    snapshotRepo: 'libs-snapshot-local'
                )
                buildInfo.env.capture = true
                buildInfo.env.collect()
                iServer.publishBuildInfo buildInfo
               }
                
            }
        }
        stage('Archive') { 
            steps {
                echo "Archiving Artifacts..."
                archiveArtifacts 'project/target/*.war'
            }
        }
    }
}

pipeline {
    agent any
    environment{
        rtMaven = Artifactory.newMavenBuild()
        rtServer = Artifactory.server 'ART'
    }
    stages {

        stage ('Artifactory configuration') {
            steps {
                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: 'ART',
                    releaseRepo: "libs-release-local",
                    snapshotRepo: "libs-snapshot-local"
                )
                rtBuildInfo (
                    captureEnv: true
                )    
            }
        }

        stage ('Exec Maven') {
            steps {
                rtMavenRun (
                    tool: 'maven', // Tool name from Jenkins configuration
                    pom: 'pom.xml',
                    goals: 'clean package',
                    deployerId: "MAVEN_DEPLOYER"
                )
            }
        }

        stage ('Publish build info') {
            steps {        
                rtPublishBuildInfo (
                    serverId: 'ART'
                )
            }
        }
        
        
        stage('Test') { 
            steps {
                echo "Testing code using pipeline.."
                junit(allowEmptyResults: true, testResults: '**/target/surefire-reports/TEST-*.xml')
            }
        }
        stage('Sonarqube') {
            steps {
                withSonarQubeEnv('Superleague-Sprint-3') {
                sh "/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/null/bin/sonar-scanner"
            }
            }
        }
        stage('Archive') { 
            steps {
                echo "Archiving Artifacts..."
                archiveArtifacts 'project/target/*.war'
            }
        }
        stage('Deploy') { 
            steps {
            	echo "Deploying code using pipeline.."
                deploy adapters: [tomcat9(credentialsId: '327c0133-dbef-4f1f-b0f8-fd62efb730f8', path: '', url: '35.222.189.243:8080')], contextPath: null, onFailure: false, war: '**/*.war'
            }
        }
        
    }
}
